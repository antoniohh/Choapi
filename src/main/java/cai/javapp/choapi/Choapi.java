/*
 * Copyright (C) 2016 Antonio Horrillo Horrillo
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/**
 * Paquete choapi.
 */
package cai.javapp.choapi;

/**
 * Importamos las librerías necesarias.
 */
import java.awt.Color;
import java.awt.HeadlessException;
import java.awt.Image;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.logging.Level;
import javax.swing.DefaultListModel;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import jiconfont.icons.FontAwesome;
import jiconfont.swing.IconFontSwing;
import org.apache.log4j.Logger;

/**
 * Aplicación Java para instalar software de Chocolatey.
 *
 * @author Antonio Horrillo Horrillo
 * @version 1.2.0.0
 */
public class Choapi extends javax.swing.JFrame {

    /**
     * Variables.
     */
    private static final Logger LOG = Logger.getLogger(Choapi.class);
    private static final String SETEXECUTIONPOLICY = "powershell Set-ExecutionPolicy Unrestricted -Force";
    private static final String GETEXECUTIONPOLICY = "powershell Get-ExecutionPolicy";
    private static final String INSTALAR_CHOCO = "powershell iex ((new-object "
            + "net.webclient).DownloadString('https://chocolatey.org/install.ps1'))";
    private static final String INSTALAR = "choco install -y ";
    private static final String DESINSTALAR = "choco uninstall -y ";
    private static final String ACTUALIZAR = "choco upgrade -y ";
    private final Dao DAO;
    private final Sistema SISTEMA;
    private final File FICDB;
    private final File DIRDB;
    private final DefaultListModel LISTAPPMOD;
    private final Progreso PROGRESO;
    private final Ayuda AYUDA;
    private final AcercaDe ACERCADE;
    private Thread thread;
    private BufferedReader stdout;
    private BufferedReader stderr;
    private ArrayList lista;
    private Image icon;
    private Process ps;
    private String[] os;
    private String linea;
    private String politica;    

    /**
     * Creates new form Choapi
     */
    public Choapi() {
        this.SISTEMA = new Sistema();
        this.DAO = new Dao();
        this.DIRDB = new File(SISTEMA.getDbRuta());
        this.FICDB = new File(SISTEMA.getDbFile());
        this.LISTAPPMOD = new DefaultListModel();
        this.PROGRESO = new Progreso();
        this.ACERCADE = new AcercaDe();
        this.AYUDA = new Ayuda();
        initComponents();
        sistemaOperativo();
        getExecutionPolicy();
        persistencia();   
        inicioGui();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        campoapp = new javax.swing.JTextField();
        btninstalar = new javax.swing.JButton();
        btndesinstalar = new javax.swing.JButton();
        btnagregar = new javax.swing.JButton();
        btnlimpiar = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        btnconsultar = new javax.swing.JButton();
        btninstalartodo = new javax.swing.JButton();
        btnactualizartodo = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        listapp = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        btnchocoinstalar = new javax.swing.JButton();
        salir = new javax.swing.JButton();
        btnlimpiartodo = new javax.swing.JButton();
        mensajes = new javax.swing.JLabel();
        btneliminar = new javax.swing.JButton();
        lbpoliticas = new javax.swing.JLabel();
        btnpoliticas = new javax.swing.JButton();
        menu = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        menuconsultar = new javax.swing.JMenuItem();
        menuinstalartodo = new javax.swing.JMenuItem();
        menuactualizartodo = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        menuexportarDB = new javax.swing.JMenuItem();
        menusalir = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        menuayuda = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        menuacercade = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(java.awt.SystemColor.controlLtHighlight);

        panel.setBackground(java.awt.SystemColor.controlHighlight);
        panel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel2.setBackground(new java.awt.Color(0, 0, 0));
        jLabel2.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        jLabel2.setForeground(java.awt.SystemColor.textHighlight);
        jLabel2.setText("<html>Escriba el nombre de la aplicación:</html>");
        jLabel2.setDoubleBuffered(true);
        jLabel2.setPreferredSize(new java.awt.Dimension(200, 30));

        campoapp.setBackground(java.awt.SystemColor.menu);
        campoapp.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        campoapp.setForeground(java.awt.SystemColor.textHighlight);
        campoapp.setDoubleBuffered(true);
        campoapp.setMinimumSize(new java.awt.Dimension(6, 30));
        campoapp.setPreferredSize(new java.awt.Dimension(59, 30));

        btninstalar.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        btninstalar.setForeground(java.awt.SystemColor.textInactiveText);
        btninstalar.setText("Instalar");
        btninstalar.setDoubleBuffered(true);
        btninstalar.setPreferredSize(new java.awt.Dimension(185, 50));
        btninstalar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btninstalarActionPerformed(evt);
            }
        });

        btndesinstalar.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        btndesinstalar.setForeground(java.awt.SystemColor.textInactiveText);
        btndesinstalar.setText("Desinstalar");
        btndesinstalar.setDoubleBuffered(true);
        btndesinstalar.setPreferredSize(new java.awt.Dimension(185, 50));
        btndesinstalar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btndesinstalarActionPerformed(evt);
            }
        });

        btnagregar.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        btnagregar.setForeground(java.awt.SystemColor.textInactiveText);
        btnagregar.setText("Agregar");
        btnagregar.setDoubleBuffered(true);
        btnagregar.setPreferredSize(new java.awt.Dimension(185, 50));
        btnagregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnagregarActionPerformed(evt);
            }
        });

        btnlimpiar.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        btnlimpiar.setForeground(java.awt.SystemColor.textInactiveText);
        btnlimpiar.setText("Limpiar");
        btnlimpiar.setDoubleBuffered(true);
        btnlimpiar.setPreferredSize(new java.awt.Dimension(185, 50));
        btnlimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnlimpiarActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        jLabel4.setForeground(java.awt.SystemColor.textHighlight);
        jLabel4.setText("<html>Puede consultar las aplicaciones agregadas en la base de datos, limpiar la lista de aplicaciones, instalar todas las aplicaciones almacenadas y actualizar las aplicaciones a las últimas versiones disponibles en el repositorio de Chocolatey. Seleccionando una aplicación en la siguiente lista, se añade automáticamnte al campo de texto principal, permitiendo actuar sobre ella de forma individual.</html>");
        jLabel4.setDoubleBuffered(true);
        jLabel4.setPreferredSize(new java.awt.Dimension(34, 30));

        btnconsultar.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        btnconsultar.setForeground(java.awt.SystemColor.textInactiveText);
        btnconsultar.setText("Consultar Aplicaciones");
        btnconsultar.setDoubleBuffered(true);
        btnconsultar.setPreferredSize(new java.awt.Dimension(175, 50));
        btnconsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnconsultarActionPerformed(evt);
            }
        });

        btninstalartodo.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        btninstalartodo.setForeground(java.awt.SystemColor.textInactiveText);
        btninstalartodo.setText("Instalar Aplicaciones");
        btninstalartodo.setDoubleBuffered(true);
        btninstalartodo.setPreferredSize(new java.awt.Dimension(175, 50));
        btninstalartodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btninstalartodoActionPerformed(evt);
            }
        });

        btnactualizartodo.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        btnactualizartodo.setForeground(java.awt.SystemColor.textInactiveText);
        btnactualizartodo.setText("Actualizar Aplicaciones");
        btnactualizartodo.setDoubleBuffered(true);
        btnactualizartodo.setPreferredSize(new java.awt.Dimension(175, 50));
        btnactualizartodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnactualizartodoActionPerformed(evt);
            }
        });

        listapp.setBackground(java.awt.SystemColor.menu);
        listapp.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        listapp.setForeground(java.awt.SystemColor.textHighlight);
        listapp.setDoubleBuffered(true);
        listapp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listappMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(listapp);

        jLabel1.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        jLabel1.setForeground(java.awt.SystemColor.textHighlight);
        jLabel1.setText("<html>El estado de las políticas de ejecución debe ser Unrestricted. Si el estado es Restricted, deberá pulsar el botón para cambiar el estado de la política de ejecución. Mientras que la política no sea Unrestricted no podrá instalar Chocolatey y por tanto, utilizar la aplicación Choapi..</html>");
        jLabel1.setDoubleBuffered(true);
        jLabel1.setPreferredSize(new java.awt.Dimension(450, 30));

        btnchocoinstalar.setBackground(java.awt.SystemColor.activeCaption);
        btnchocoinstalar.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        btnchocoinstalar.setForeground(java.awt.SystemColor.textInactiveText);
        btnchocoinstalar.setDoubleBuffered(true);
        btnchocoinstalar.setLabel("Instalar Chocolatey");
        btnchocoinstalar.setPreferredSize(new java.awt.Dimension(250, 50));
        btnchocoinstalar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnchocoinstalarActionPerformed(evt);
            }
        });

        salir.setText("Salir");
        salir.setDoubleBuffered(true);
        salir.setPreferredSize(new java.awt.Dimension(100, 30));
        salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirActionPerformed(evt);
            }
        });

        btnlimpiartodo.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        btnlimpiartodo.setForeground(java.awt.SystemColor.textInactiveText);
        btnlimpiartodo.setText("Limpiar Aplicaciones");
        btnlimpiartodo.setDoubleBuffered(true);
        btnlimpiartodo.setPreferredSize(new java.awt.Dimension(175, 50));
        btnlimpiartodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnlimpiartodoActionPerformed(evt);
            }
        });

        mensajes.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        mensajes.setForeground(javax.swing.UIManager.getDefaults().getColor("ToolBar.dockingForeground"));
        mensajes.setPreferredSize(new java.awt.Dimension(200, 30));

        btneliminar.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        btneliminar.setForeground(java.awt.SystemColor.textInactiveText);
        btneliminar.setText("Eliminar");
        btneliminar.setDoubleBuffered(true);
        btneliminar.setPreferredSize(new java.awt.Dimension(185, 50));
        btneliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btneliminarActionPerformed(evt);
            }
        });

        lbpoliticas.setFont(new java.awt.Font("Roboto", 1, 24)); // NOI18N
        lbpoliticas.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbpoliticas.setPreferredSize(new java.awt.Dimension(400, 50));

        btnpoliticas.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        btnpoliticas.setForeground(java.awt.SystemColor.textInactiveText);
        btnpoliticas.setText("Unrestricted");
        btnpoliticas.setDoubleBuffered(true);
        btnpoliticas.setPreferredSize(new java.awt.Dimension(250, 50));
        btnpoliticas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnpoliticasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelLayout.createSequentialGroup()
                        .addComponent(btnagregar, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(btneliminar, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(btninstalar, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(btndesinstalar, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
                        .addGap(21, 21, 21)
                        .addComponent(btnlimpiar, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE))
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(campoapp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelLayout.createSequentialGroup()
                        .addComponent(mensajes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(salir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelLayout.createSequentialGroup()
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btninstalartodo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
                            .addComponent(btnconsultar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnactualizartodo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnlimpiartodo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2))
                    .addGroup(panelLayout.createSequentialGroup()
                        .addComponent(lbpoliticas, javax.swing.GroupLayout.PREFERRED_SIZE, 430, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnpoliticas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(btnchocoinstalar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnchocoinstalar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbpoliticas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnpoliticas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(campoapp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnlimpiar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btndesinstalar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btninstalar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btneliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnagregar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelLayout.createSequentialGroup()
                        .addComponent(btnconsultar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
                        .addComponent(btnlimpiartodo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                        .addComponent(btninstalartodo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 56, Short.MAX_VALUE)
                        .addComponent(btnactualizartodo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2))
                .addGap(18, 18, 18)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(salir, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mensajes, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jLabel1.getAccessibleContext().setAccessibleName("Instalamos Chocolatey si no lo tenemos isntalado en el sistema.\\n\nSi lo tenemos instalado podemos ir al siguiente paso.");

        jMenu1.setText("Archivo");

        menuconsultar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        menuconsultar.setText("Consultar Base de Datos");
        menuconsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuconsultarActionPerformed(evt);
            }
        });
        jMenu1.add(menuconsultar);

        menuinstalartodo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        menuinstalartodo.setText("Instalar Todas las Aplicaciones");
        menuinstalartodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuinstalartodoActionPerformed(evt);
            }
        });
        jMenu1.add(menuinstalartodo);

        menuactualizartodo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        menuactualizartodo.setText("Actualizar Todas las Aplicaciones");
        menuactualizartodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuactualizartodoActionPerformed(evt);
            }
        });
        jMenu1.add(menuactualizartodo);
        jMenu1.add(jSeparator1);

        menuexportarDB.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        menuexportarDB.setText("Exportar Base de Datos");
        menuexportarDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuexportarDBActionPerformed(evt);
            }
        });
        jMenu1.add(menuexportarDB);

        menusalir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        menusalir.setText("Salir de Choapi");
        menusalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menusalirActionPerformed(evt);
            }
        });
        jMenu1.add(menusalir);

        menu.add(jMenu1);

        jMenu2.setText("Ayuda");

        menuayuda.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        menuayuda.setText("Ayuda de Choapi");
        menuayuda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuayudaActionPerformed(evt);
            }
        });
        jMenu2.add(menuayuda);
        jMenu2.add(jSeparator2);

        menuacercade.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        menuacercade.setText("Acerca de");
        menuacercade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuacercadeActionPerformed(evt);
            }
        });
        jMenu2.add(menuacercade);

        menu.add(jMenu2);

        setJMenuBar(menu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void menuconsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuconsultarActionPerformed
        // TODO add your handling code here:
        try {
            consultarTodo();
        } catch (Exception e) {
        }
    }//GEN-LAST:event_menuconsultarActionPerformed

    private void menuactualizartodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuactualizartodoActionPerformed
        // TODO add your handling code here:
        try {
            actualizarTodo();
        } catch (Exception e) {
        }
    }//GEN-LAST:event_menuactualizartodoActionPerformed

    private void menuinstalartodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuinstalartodoActionPerformed
        // TODO add your handling code here:
        try {
            instalarTodo();
        } catch (Exception e) {
        }
    }//GEN-LAST:event_menuinstalartodoActionPerformed

    private void menusalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menusalirActionPerformed
        // TODO add your handling code here:
        // Salimos de la aplicación.
        System.exit(0);
    }//GEN-LAST:event_menusalirActionPerformed

    private void menuayudaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuayudaActionPerformed
        // TODO add your handling code here:
        // Hacemos visible el JFrame de Ayuda.
        AYUDA.setVisible(true);
    }//GEN-LAST:event_menuayudaActionPerformed

    private void menuacercadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuacercadeActionPerformed
        // TODO add your handling code here:
        // Hacemos visible el JFrame de Acerca de.
        ACERCADE.setSalidaSO(SISTEMA.sistemaOperativo());
        ACERCADE.setSalidaJavaHome(SISTEMA.javaHome());
        ACERCADE.setVisible(true);
    }//GEN-LAST:event_menuacercadeActionPerformed

    private void btnlimpiartodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnlimpiartodoActionPerformed
        // TODO add your handling code here:
        // Limpiamos el contenido de la lista de aplicaciones.
        listapp.setModel(LISTAPPMOD);
        LISTAPPMOD.removeAllElements();
    }//GEN-LAST:event_btnlimpiartodoActionPerformed

    private void salirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_salirActionPerformed

    private void btnchocoinstalarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnchocoinstalarActionPerformed
        // TODO add your handling code here:
        try {
            instalarchocolatey();
        } catch (Exception e) {
        }
    }//GEN-LAST:event_btnchocoinstalarActionPerformed

    private void listappMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listappMouseClicked
        // TODO add your handling code here:
        // Asignamos el String seleccionado de la lista de aplicaciones al campo
        // de texto principal.
        try {
            campoapp.setText(listapp.getSelectedValue().substring(12));
        } catch (Exception e) {
        }
    }//GEN-LAST:event_listappMouseClicked

    private void btnactualizartodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnactualizartodoActionPerformed
        // TODO add your handling code here:
        try {
            actualizarTodo();
        } catch (Exception e) {
        }
    }//GEN-LAST:event_btnactualizartodoActionPerformed

    private void btninstalartodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btninstalartodoActionPerformed
        // TODO add your handling code here:
        try {
            instalarTodo();
        } catch (Exception e) {
        }
    }//GEN-LAST:event_btninstalartodoActionPerformed

    private void btnconsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnconsultarActionPerformed
        // TODO add your handling code here:
        try {
            consultarTodo();
        } catch (Exception e) {
        }
    }//GEN-LAST:event_btnconsultarActionPerformed

    private void btnlimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnlimpiarActionPerformed
        // TODO add your handling code here:
        // Limpiamos el contenido del campo asignando ningún caracter.
        campoapp.setText("");
    }//GEN-LAST:event_btnlimpiarActionPerformed

    private void btnagregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnagregarActionPerformed
        // TODO add your handling code here:
        try {
            agregar();
        } catch (Exception e) {
        }
    }//GEN-LAST:event_btnagregarActionPerformed

    private void btndesinstalarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btndesinstalarActionPerformed
        // TODO add your handling code here:
        try {
            desinstalar();
        } catch (Exception e) {
        }
    }//GEN-LAST:event_btndesinstalarActionPerformed

    private void btninstalarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btninstalarActionPerformed
        // TODO add your handling code here:
        try {
            instalar();
        } catch (Exception e) {
        }
    }//GEN-LAST:event_btninstalarActionPerformed

    private void btneliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btneliminarActionPerformed
        // TODO add your handling code here:
        try {
            eliminar();
        } catch (Exception e) {
        }
    }//GEN-LAST:event_btneliminarActionPerformed

    private void menuexportarDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuexportarDBActionPerformed
        // TODO add your handling code here:
        try {
            exportarDB();
        } catch (Exception e) {
        }
    }//GEN-LAST:event_menuexportarDBActionPerformed

    private void btnpoliticasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnpoliticasActionPerformed
        // TODO add your handling code here:
        try {
            setExecutionPolicy();
        } catch (Exception e) {
        }
    }//GEN-LAST:event_btnpoliticasActionPerformed

    /**
     * @param args the cmd line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Choapi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Choapi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Choapi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Choapi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Choapi().setVisible(true);
            }
        });
    }

    /**
     * Método getExecutionPolicy().
     *
     * Identificamos el estado de Windows PowerShell Script Execution Policy.
     *
     * @return
     */
    private void getExecutionPolicy() {
        try {
            ps = Runtime.getRuntime().exec(GETEXECUTIONPOLICY);
            ps.getOutputStream().close();
            stdout = new BufferedReader(new InputStreamReader(ps.getInputStream()));
            stderr = new BufferedReader(new InputStreamReader(ps.getErrorStream()));
            while ((linea = stdout.readLine()) != null) {
                System.out.println("El estado de ExecutionPolicy es: " + linea);
                politica = linea;
            }
            while ((linea = stderr.readLine()) != null) {
                System.out.println(linea);
            }
            stderr.close();
            stdout.close();
        } catch (IOException ex) {
            java.util.logging.Logger.getLogger(Choapi.class.getName()).log(Level.SEVERE, null, ex);
            LOG.fatal("Error al obtener ExecutionPolicy: ", ex);
        }
    }

    /**
     * Método setExecutionPolicy().
     *
     * Set-ExecutionPolicy Unrestricted.
     */
    private void setExecutionPolicy() {
        try {
            ejecutar(SETEXECUTIONPOLICY);
            LOG.info("Set-ExecutionPolicy Unrestricted Aplicada con éxito.");
            System.out.println("Set-ExecutionPolicy Unrestricted Aplicada con éxito.");
            mensajes.setText("Set-ExecutionPolicy Unrestricted Aplicada con éxito.");
        } catch (Exception ex) {
            System.err.println(ex);
            LOG.fatal("Error al aplicar ExecutionPolicy: ", ex);
            mensajes.setText("Error al aplicar ExecutionPolicy.");
        }
        JOptionPane.showMessageDialog(null, "Choapi necesita cerrarse para completar el cambio de política.\n"
                + "Una vez se complete el cierre, vuelva a iniciar Choapi y podrá instalar Chocolatey.\n"
                + "Pulse en aceptar para salir de la aplicación."
        );
        // Forzamos salida de la aplicación.
        System.exit(0);
    }

    /**
     * Método sistemaOperativo().
     *
     * Identificamos el sistema operativo en el que se ejecuta la aplicación.
     */
    private void sistemaOperativo() {
        // Iniciamos el Logger. Configuración en log4j.properties
        // trace, debug, info, warn, error, fatal.
        // BasicConfigurator.configure();        
        LOG.info("Iniciando la aplicación...");
        // Obtenemos el nombre del sistema operativo.
        this.os = SISTEMA.getSistema().split(" ");
        // Creamos el directorio ../db para la base de datos.        
        this.DIRDB.mkdir();
        // Mensajes con el sistema operativo y la ruta de jre.
        System.out.println("Iniciando la aplicación...");
        System.out.println(SISTEMA.sistemaOperativo());
        System.out.println(SISTEMA.javaHome());
    }

    /**
     * Método persistencia().
     *
     * Establecemos conexión con la base de datos. Comprobamos si el archivo de
     * la base de datos existe o no. Si no existe lo creamos.
     *
     * Encerramos en un try - catch la consulta a la base de datos.
     */
    private void persistencia() {
        try {
            // Comprobamos la existencia del archivo de la base de datos.
            if (FICDB.exists()) {
                // Mensajes de estado.
                System.out.println("Encontrado archivo de base de datos.");
                System.out.println(FICDB.getAbsolutePath());
                // Log info de conexión.
                LOG.info("Encontrado archivo de base de datos.");
            } else {
                System.out.println("Archivo de base de datos no existe.");
                LOG.info("Archivo de base de datos no existe.");
                // Preguntamos al usuario si desea importar el archivo o crear uno nuevo.               
                Object[] opciones = {"Nueva Base de Datos", "Importar Base de Datos"};
                String msg = "No existe el archivo de base de datos 'choapi.db'. \n"
                        + "Choapi necesita el archivo para almacenar las aplicaciones. \n"
                        + "Puede crear un archivo nuevo o importar un archivo exportado previamente. \n"
                        + "¿Desea importar el archivo o crear uno nuevo?";
                int opcion = JOptionPane.showOptionDialog(null, msg, "choapi.db",
                        JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, opciones, opciones[0]);

                if (opcion == JOptionPane.YES_OPTION) {
                    // Metodos de la clase Dao() para crear la base de datos y tablas.                   
                    DAO.crearDB();
                    DAO.crearTabla();
                    // Log info de conexión.
                    LOG.info("Creando archivo de base de datos en " + SISTEMA.getDbFile() + ".");
                    System.out.println("Creando archivo de base de datos en " + SISTEMA.getDbFile() + ".");

                } else {
                    // Log info de conexión.
                    LOG.info("Importando el archivo choapi.db...");
                    System.out.println("Importando el archivo choapi.db...");
                    // La Clase JFileChooser nos permitirá Abrir el archivo choapi.db.
                    JFileChooser fc = new JFileChooser();
                    fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
                    // Creamos el filtro para el archivo de base de datos.
                    FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivo choapi.db", "db");
                    // Indicamos el filtro.
                    fc.setFileFilter(filtro);
                    // Mostramos el explorador de archivos.
                    fc.showOpenDialog(this);
                    // Asignamos el archivo seleccionado.
                    File origen = fc.getSelectedFile();
                    if (origen == null) {
                        // Log info de conexión.
                        LOG.info("Importación del archivo choapi.db cancelada por el usuario. Salida de la aplicación.");
                        System.out.println("Importación del archivo choapi.db cancelada por el usuario. Salida de la aplicación.");
                        System.exit(0);
                    } else {
                        File destino = new File(SISTEMA.getDbFile());
                        InputStream entradaDB = new FileInputStream(origen);
                        OutputStream salidaDB = new FileOutputStream(destino);
                        byte[] buf = new byte[1024];
                        int len;
                        while ((len = entradaDB.read(buf)) > 0) {
                            salidaDB.write(buf, 0, len);
                        }
                        // Cerramos los Stream.
                        entradaDB.close();
                        salidaDB.close();
                        // Log info de conexión.
                        LOG.info("Importación del archivo choapi.db realizada con éxito");
                        System.out.println("Importación del archivo choapi.db realizada con éxito");
                    }
                }
            }
        } catch (HeadlessException | IOException ex) {
            System.out.println(ex);
            // Log fatal de conexión.
            LOG.fatal("Error al crear la base de datos: ", ex);
            // Mensaje de fallo.
            JOptionPane.showMessageDialog(this, "No se ha podido crear la "
                    + "base de datos.\n"
                    + "Pulse en aceptar para salir de la aplicación."
            );
            // Forzamos salida de la aplicación.
            System.exit(0);
        }
    }

    /**
     * Método inicioGui().
     *
     * Condiciones de inicio de la aplicación.
     */
    private void inicioGui() {
        // Establecemos el icono de la barra de menus de la aplicación.        
        this.icon = new ImageIcon(getClass().getResource("/Choapi.png")).getImage();
        setIconImage(icon);
        //Iconos Font Awesome para botones de la aplicacion.        
        IconFontSwing.register(FontAwesome.getIconFont());
        Icon iconOut = IconFontSwing.buildIcon(FontAwesome.SIGN_OUT, 20, new Color(150, 0, 0));
        salir.setIcon(iconOut);
        menusalir.setIcon(iconOut);
        Icon iconDb = IconFontSwing.buildIcon(FontAwesome.DATABASE, 20, new Color(0, 150, 0));
        btnconsultar.setIcon(iconDb);
        menuconsultar.setIcon(iconDb);
        Icon iconSave = IconFontSwing.buildIcon(FontAwesome.FLOPPY_O, 20, new Color(0, 150, 0));
        btnagregar.setIcon(iconSave);
        menuexportarDB.setIcon(iconDb);
        Icon iconTrash = IconFontSwing.buildIcon(FontAwesome.TRASH_O, 20, new Color(0, 150, 0));
        btneliminar.setIcon(iconTrash);
        Icon iconErase = IconFontSwing.buildIcon(FontAwesome.ERASER, 20, new Color(0, 150, 0));
        btnlimpiar.setIcon(iconErase);
        btnlimpiartodo.setIcon(iconErase);
        Icon iconHdd = IconFontSwing.buildIcon(FontAwesome.HDD_O, 20, new Color(0, 150, 0));
        btninstalar.setIcon(iconHdd);
        btninstalartodo.setIcon(iconHdd);
        menuinstalartodo.setIcon(iconHdd);
        Icon iconBan = IconFontSwing.buildIcon(FontAwesome.BAN, 20, new Color(0, 150, 0));
        btndesinstalar.setIcon(iconBan);
        Icon iconRefresh = IconFontSwing.buildIcon(FontAwesome.REFRESH, 20, new Color(0, 150, 0));
        btnactualizartodo.setIcon(iconRefresh);
        menuactualizartodo.setIcon(iconRefresh);
        Icon iconQuestion = IconFontSwing.buildIcon(FontAwesome.QUESTION, 20, new Color(0, 150, 0));
        menuayuda.setIcon(iconQuestion);
        Icon iconInfo = IconFontSwing.buildIcon(FontAwesome.INFO, 20, new Color(0, 150, 0));
        menuacercade.setIcon(iconInfo);
        Icon iconPol = IconFontSwing.buildIcon(FontAwesome.SHIELD, 20, new Color(0, 150, 0));
        btnpoliticas.setIcon(iconPol);        
        
        // Identificamos el sistema operativo y asignamos icono correspondiente.
        if (this.os[0] != null) {
            switch (os[0]) {
                case "Windows":
                    Icon iconWindows = IconFontSwing.buildIcon(FontAwesome.WINDOWS,
                            25, new Color(0, 150, 0));
                    btnchocoinstalar.setIcon(iconWindows);
                    break;
                case "Linux":
                    Icon iconLinux = IconFontSwing.buildIcon(FontAwesome.LINUX,
                            25, new Color(0, 150, 0));
                    btnchocoinstalar.setIcon(iconLinux);
                    break;
                case "Mac":
                    Icon iconApple = IconFontSwing.buildIcon(FontAwesome.APPLE,
                            25, new Color(0, 150, 0));
                    btnchocoinstalar.setIcon(iconApple);
                    break;
                default:
                    Icon iconDesktop = IconFontSwing.buildIcon(FontAwesome.DESKTOP,
                            25, new Color(0, 150, 0));
                    btnchocoinstalar.setIcon(iconDesktop);
            }
        } else {
            Icon iconDesktop = IconFontSwing.buildIcon(FontAwesome.DESKTOP,
                    25, new Color(0, 150, 0));
            btnchocoinstalar.setIcon(iconDesktop);
        }
        
        if ("Restricted".equals(politica)) {           
            lbpoliticas.setText("Set-ExecutionPolicy "+politica);
            lbpoliticas.setForeground(new Color(150, 0, 0));
            btnchocoinstalar.setEnabled(false);           
        } 
        if ("Unrestricted".equals(politica)) {           
            lbpoliticas.setText("Set-ExecutionPolicy "+politica);
            lbpoliticas.setForeground(new Color(0, 150, 0));
            btnpoliticas.setEnabled(false);           
        }
    }

    /**
     * Método ejecutar(String cmd).
     *
     * Recibe un String con el comando para instalar la aplicación.
     *
     * @param cmd
     */
    public void ejecutar(String cmd) {
        try {
            ps = Runtime.getRuntime().exec(cmd);
            ps.getOutputStream().close();
            System.out.println("Proceso: " + cmd);
            stdout = new BufferedReader(new InputStreamReader(ps.getInputStream()));
            stderr = new BufferedReader(new InputStreamReader(ps.getErrorStream()));
            while ((linea = stdout.readLine()) != null) {
                System.out.println(linea);
            }
            while ((linea = stderr.readLine()) != null) {
                System.out.println(linea);
            }
            stderr.close();
            stdout.close();
            System.out.println("Proceso realizado.");
        } catch (IOException ex) {
            java.util.logging.Logger.getLogger(Choapi.class.getName()).log(Level.SEVERE, null, ex);
            LOG.fatal("Error al ejecutar comando en powershell: ", ex);
        }
    }

    /**
     * Método instalarchocolatey().
     *
     * Instalamos la aplicación especificada en el campo principal.
     */
    public void instalarchocolatey() {
        thread = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    PROGRESO.setTitBarra("Instalando Chocolatey...");
                    PROGRESO.jPr.setMaximum(2);
                    PROGRESO.jPr.setStringPainted(true);
                    PROGRESO.setVisible(true);
                    PROGRESO.jPr.setValue(1);
                    PROGRESO.salida.insert("Instalando Chocolatey\n", 0);
                    ejecutar(INSTALAR_CHOCO);
                    PROGRESO.jPr.setValue(2);
                    LOG.info("Chocolatey instalado con éxito.");
                    System.out.println("Chocolatey instalado con éxito.");
                    mensajes.setText("Chocolatey instalada con éxito.");
                } catch (Exception ex) {
                    System.err.println(ex);
                    LOG.fatal("No se ha podido instalar Chocolatey: ", ex);
                    mensajes.setText("No se ha podido instalar Chocolatey.");
                }
                PROGRESO.dispose();
            }
        });
        thread.start();
    }

    /**
     * Método agregar().
     *
     * Agregamos la aplicación especificada en la base de datos.
     */
    public void agregar() {
        try {
            if (campoapp.getText() != null && !"".equals(campoapp.getText())) {
                if (!DAO.comprobarApp(campoapp.getText())) {
                    DAO.insertarApp(campoapp.getText());
                    mensajes.setText("Aplicación " + campoapp.getText()
                            + " agregada en la base de datos.");
                } else {
                    mensajes.setText("Aplicación " + campoapp.getText()
                            + " existe en la base de datos.");
                }
            } else {
                mensajes.setText("Escriba el nombre de una aplicación.");
            }
        } catch (Exception ex) {
            System.err.println(ex);
            LOG.fatal("No se ha podido agregar la aplicación: ", ex);
            mensajes.setText("No se ha podido agregar la aplicación.");
        }
    }

    /**
     * Método eliminar().
     *
     * Eliminamos la aplicación especificada de la base de datos.
     */
    public void eliminar() {
        try {
            if (campoapp.getText() != null && !"".equals(campoapp.getText())) {
                if (DAO.comprobarApp(campoapp.getText())) {
                    DAO.eliminarApp(campoapp.getText());
                    mensajes.setText("Aplicación " + campoapp.getText()
                            + " eliminada de la base de datos.");
                } else {
                    mensajes.setText("Aplicación " + campoapp.getText()
                            + " no existe en la base de datos.");
                }
            } else {
                mensajes.setText("Escriba el nombre de una aplicación.");
            }
        } catch (Exception ex) {
            System.err.println(ex);
            LOG.fatal("No se ha podido eliminar la aplicación: ", ex);
            mensajes.setText("No se ha podido eliminar la aplicación.");
        }
    }

    /**
     * Método instalar().
     *
     * Instalamos la aplicación especificada en el campo principal.
     */
    public void instalar() {
        thread = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    if (campoapp.getText() != null && !"".equals(campoapp.getText())) {
                        PROGRESO.setTitBarra("Instalando Aplicación...");
                        PROGRESO.jPr.setMaximum(2);
                        PROGRESO.jPr.setStringPainted(true);
                        PROGRESO.setVisible(true);
                        PROGRESO.jPr.setValue(1);
                        PROGRESO.salida.insert("Instalando " + campoapp.getText() + "\n", 0);
                        ejecutar(INSTALAR + campoapp.getText());
                        PROGRESO.jPr.setValue(2);
                        mensajes.setText("Aplicación " + campoapp.getText()
                                + " instalada con éxito.");
                    } else {
                        mensajes.setText("Escriba el nombre de una aplicación.");
                    }
                } catch (Exception ex) {
                    System.err.println(ex);
                    LOG.fatal("No se ha podido instalar la aplicación: ", ex);
                    mensajes.setText("No se ha podido instalar la aplicación.");
                }
                PROGRESO.dispose();
            }
        });
        thread.start();
    }

    /**
     * Método desinstalar().
     *
     * Desinstalamos la aplicación especificada en el campo principal.
     */
    public void desinstalar() {
        thread = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    if (campoapp.getText() != null && !"".equals(campoapp.getText())) {
                        PROGRESO.setTitBarra("Desinstalando Aplicación...");
                        PROGRESO.jPr.setMaximum(2);
                        PROGRESO.jPr.setStringPainted(true);
                        PROGRESO.setVisible(true);
                        PROGRESO.jPr.setValue(1);
                        PROGRESO.salida.insert("Desinstalando " + campoapp.getText() + "\n", 0);
                        ejecutar(DESINSTALAR + campoapp.getText());
                        PROGRESO.jPr.setValue(2);
                        mensajes.setText("Aplicación " + campoapp.getText()
                                + " desinstalada con éxito.");
                    } else {
                        mensajes.setText("Escriba el nombre de una aplicación.");
                    }
                } catch (Exception ex) {
                    System.err.println(ex);
                    LOG.fatal("No se ha podido desinstalar la aplicación: ", ex);
                    mensajes.setText("No se ha podido desinstalar la aplicación.");
                }
                PROGRESO.dispose();
            }
        });
        thread.start();
    }

    /**
     * Método consultarTodo().
     *
     * Consultamos las aplicaciones almacenadas en la base de datos.
     */
    public void consultarTodo() {
        try {
            listapp.setModel(LISTAPPMOD);
            LISTAPPMOD.removeAllElements();
            this.lista = DAO.leerApps();
            for (int i = 0; i < lista.size(); i++) {
                LISTAPPMOD.addElement("Aplicación: " + this.lista.get(i).toString());
            }
            mensajes.setText("Consulta realizada con éxito.");
        } catch (Exception ex) {
            System.err.println(ex);
            LOG.fatal("No se ha podido realizar la consulta: ", ex);
            mensajes.setText("No se ha podido realizar la consulta.");
        }
    }

    /**
     * Método instalarTodo().
     *
     * Instala todas las aplicaciones almacenadas en la base de datos.
     *
     * Integra una barra de progreso.
     */
    public void instalarTodo() {
        lista = DAO.leerApps();
        PROGRESO.setTitBarra("Instalando Aplicaciones...");
        PROGRESO.jPr.setMaximum(lista.size());
        PROGRESO.jPr.setStringPainted(true);
        PROGRESO.setVisible(true);
        thread = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    for (int i = 0; i < lista.size(); i++) {
                        PROGRESO.jPr.setValue(i + 1);
                        PROGRESO.salida.insert("Instalando " + lista.get(i).toString() + "\n", 0);
                        ejecutar(INSTALAR + lista.get(i).toString());
                    }
                    mensajes.setText("Se han instalado las aplicaciones.");
                } catch (Exception ex) {
                    System.err.println(ex);
                    LOG.fatal("No se ha podido instalar las aplicaciones: ", ex);
                    mensajes.setText("No se ha podido instalar las aplicaciones.");
                }
                PROGRESO.dispose();
            }
        });
        thread.start();
    }

    /**
     * Método instalarTodo().
     *
     * Actualiza a las últimas versiones las aplicaciones almacenadas en la base
     * de datos.
     *
     * Integra una barra de progreso.
     */
    public void actualizarTodo() {
        lista = DAO.leerApps();
        PROGRESO.setTitBarra("Actualizando Aplicaciones...");
        PROGRESO.jPr.setMaximum(lista.size());
        PROGRESO.jPr.setStringPainted(true);
        PROGRESO.setVisible(true);
        thread = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    for (int i = 0; i < lista.size(); i++) {
                        PROGRESO.jPr.setValue(i + 1);
                        PROGRESO.salida.insert("Actualizando " + lista.get(i).toString() + "\n", 0);
                        ejecutar(ACTUALIZAR + lista.get(i).toString());
                    }
                    mensajes.setText("Se han actualizado las aplicaciones.");
                } catch (Exception ex) {
                    System.err.println(ex);
                    LOG.fatal("No se ha podido actualizar las aplicaciones: ", ex);
                    mensajes.setText("No se ha podido actualizar las aplicaciones.");
                }
                PROGRESO.dispose();
            }
        });
        thread.start();
    }

    /**
     * Método exportarDB().
     *
     * Exportamos la base de datos.
     */
    private void exportarDB() {
        try {
            // La Clase JFileChooser nos permitirá Abrir el archivo choapi.db.
            JFileChooser fc = new JFileChooser();
            fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
            // Creamos el filtro para el archivo de base de datos.
            FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivo choapi.db", "db");
            // Indicamos el filtro.
            fc.setFileFilter(filtro);
            // Mostramos el explorador de archivos.           
            fc.showSaveDialog(this);
            // Asignamos el archivo seleccionado.
            File destino = fc.getSelectedFile();
            if (destino == null) {
                // Log info de la exportación.
                LOG.info("Exportación del archivo choapi.db cancelada por el usuario.");
                System.out.println("Exportación del archivo choapi.db cancelada por el usuario.");
                mensajes.setText("Exportación del archivo choapi.db cancelada por el usuario.");
            } else {
                File origen = new File(SISTEMA.getDbFile());
                InputStream entradaDB = new FileInputStream(origen);
                OutputStream salidaDB = new FileOutputStream(destino);
                byte[] buf = new byte[1024];
                int len;
                while ((len = entradaDB.read(buf)) > 0) {
                    salidaDB.write(buf, 0, len);
                }
                // Cerramos los Stream.
                entradaDB.close();
                salidaDB.close();
                // Log info de conexión.
                LOG.info("Exportación del archivo choapi.db realizada con éxito.");
                System.out.println("Exportación del archivo choapi.db realizada con éxito.");
                mensajes.setText("Exportación del archivo choapi.db realizada con éxito.");
            }
        } catch (IOException ex) {
            System.err.println(ex);
            LOG.fatal("No se ha podido exportar la base de datos: ", ex);
            mensajes.setText("No se ha podido exportar la base de datos.");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnactualizartodo;
    private javax.swing.JButton btnagregar;
    private javax.swing.JButton btnchocoinstalar;
    private javax.swing.JButton btnconsultar;
    private javax.swing.JButton btndesinstalar;
    private javax.swing.JButton btneliminar;
    private javax.swing.JButton btninstalar;
    private javax.swing.JButton btninstalartodo;
    private javax.swing.JButton btnlimpiar;
    private javax.swing.JButton btnlimpiartodo;
    private javax.swing.JButton btnpoliticas;
    private javax.swing.JTextField campoapp;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JLabel lbpoliticas;
    private javax.swing.JList<String> listapp;
    private javax.swing.JLabel mensajes;
    private javax.swing.JMenuBar menu;
    private javax.swing.JMenuItem menuacercade;
    private javax.swing.JMenuItem menuactualizartodo;
    private javax.swing.JMenuItem menuayuda;
    private javax.swing.JMenuItem menuconsultar;
    private javax.swing.JMenuItem menuexportarDB;
    private javax.swing.JMenuItem menuinstalartodo;
    private javax.swing.JMenuItem menusalir;
    private javax.swing.JPanel panel;
    private javax.swing.JButton salir;
    // End of variables declaration//GEN-END:variables
}
